//这是国内一个老哥的办法，把数组的一位留空用来区分队列是满了还是空的。国外的老哥用的是每次加元素就capacity++ 然后用capacity和数组的长度进行比较
//因为不管怎么样rear和front总归是要动的，所以这样可以少用一个计数器。

class MyCircularDeque {
    private int front;
    private int rear;
    private int[] arr;
    private int capacity;
    /** Initialize your data structure here. Set the size of the deque to be k. */
    public MyCircularDeque(int k) {
      capacity = k + 1;
      arr = new int[capacity];
      front = 0;
      rear = 0;
    }
    
    /** Adds an item at the front of Deque. Return true if the operation is successful. */
    public boolean insertFront(int value) {
      if(isFull()) return false;
      front = (front - 1 + capacity) % capacity;
      arr[front] = value;
      return true;
    }
    
    /** Adds an item at the rear of Deque. Return true if the operation is successful. */
    public boolean insertLast(int value) {
      if(isFull()) return false;
      arr[rear] = value;
      rear = (rear + 1) % capacity;
      return true;
    }
    
    /** Deletes an item from the front of Deque. Return true if the operation is successful. */
    public boolean deleteFront() {
      if(isEmpty()) return false;
      front = (front + 1) % capacity;
      return true;
    }
    
    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
    public boolean deleteLast() {
      if(isEmpty()) return false;
      rear = (rear - 1 + capacity) % capacity;
      return true;
    }
    
    /** Get the front item from the deque. */
    public int getFront() {
      if(isEmpty()) return -1;
      return arr[front];
    }
    
    /** Get the last item from the deque. */
    public int getRear() {
      if(isEmpty()) return -1;
      return arr[(rear - 1 + capacity) % capacity];
    }
    
    /** Checks whether the circular deque is empty or not. */
    public boolean isEmpty() {
      return front == rear;
    }
    
    /** Checks whether the circular deque is full or not. */
    public boolean isFull() {
      return front == (rear + 1) % capacity;
    }
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */