#1.简单的递归算法
#时间复杂度O(n)

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<Integer>();
        preorder(root,res);
        return res;
    }


    public void preorder(TreeNode root, List<Integer> res){
      if(root == null) return;
      res.add(root.val);
      preorder(root.left,res);
      preorder(root.right,res);
    }
}
#2.迭代算法
#时间复杂度O(n)
#前序遍历要的是根左右，所以入栈的时候要入右左，这样子在弹出来的时候左子节点才会先弹出来

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
      List<Integer> res = new ArrayList<>();
      if(root == null) return res;
      Deque<TreeNode> stack = new ArrayDeque<>();
      stack.push(root);


      while(!stack.isEmpty()){
        TreeNode cur = stack.pop();
        res.add(cur.val);


        if(cur.right != null){
          stack.push(cur.right);
        }
        if(cur.left != null){
          stack.push(cur.left);
        }
      }
      return res;
    }
}