#用的BFS来做，这道题要注意的一点是要一层一层的输出，用一个队列的长度来控制一次性的输出。
#时间复杂度O(n)
#也能用DFS来做，递归的时候用level来控制输出的时候放在第几层

import java.util.*;

class Solution {
//    class Node {
//        public int val;
//        public List<Node> children;
//
//        public Node() {}
//
//        public Node(int _val) {
//            val = _val;
//        }
//
//        public Node(int _val, List<Node> _children) {
//            val = _val;
//            children = _children;
//        }
//    };
    public List<List<Integer>> levelOrder(Node root) {
      List<List<Integer>> ans = new ArrayList<>();
      if(root == null) return ans;
      Queue<Node> queue = new LinkedList<>();
      queue.add(root);
      while(!queue.isEmpty()){
          List<Integer> level = new ArrayList<>();
          int size = queue.size();
          for(int i = 0; i < size;i ++){
              Node node =  queue.poll();
              level.add(node.val);
              queue.addAll(node.children);
          }
          ans.add(level);
      }
      return ans;
    }
}