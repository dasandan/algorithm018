#1.简单的递归方法
#时间复杂度O(n)

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
      List<Integer> res = new ArrayList<Integer>();
      inorder(root,res);
      return res;
    }


    public void inorder(TreeNode root, List<Integer> res){
      if(root == null) return;


      inorder(root.left,res);
      res.add(root.val);
      inorder(root.right,res);
    }
}

#2.迭代做法
#时间复杂度O(n)
#不停的找左子树，按照左中右顺序打印

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
      List<Integer> res = new ArrayList<>();
      if(root == null) return res;
      Deque<TreeNode> stack = new ArrayDeque<>();
      
      while (!stack.isEmpty() || root != null){
        while( root != null){
          stack.push(root);
          root = root.left;
        }
        
        root = stack.pop();
        res.add(root.val);
        
        root = root.right;
      }
      return res;
    }
}