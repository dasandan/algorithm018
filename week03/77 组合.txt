#回溯法
#需要一个栈来记录在分叉时选择的数据


class Solution {
  public List<List<Integer>> combine(int n, int k) {
    List<List<Integer>> res = new ArrayList<>();
    if (k <= 0 || n < k) return res;
    Deque<Integer> path = new ArrayDeque<>();
    dfs(n, k, 1, path, res);
    return res;
  }
  private void dfs(int n,int k, int begin,Deque<Integer> path,List<List<Integer>> res){
    //递归终止条件时：path的长度等于k
    if(path.size() == k){
      res.add(new ArrayList<>(path));
      return;
    }


    for(int i = begin;i <= n;i++){
      path.addLast(i);
      //探索下一层
      dfs(n, k, i+1,path,res);
      //回溯
      path.removeLast();
    }
  }
}